{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Subscription from \"./subscription\"; // Collection class for creating (and internally managing) channel subscriptions.\n// The only method intended to be triggered by the user is ActionCable.Subscriptions#create,\n// and it should be called through the consumer like so:\n//\n//   App = {}\n//   App.cable = ActionCable.createConsumer(\"ws://example.com/accounts/1\")\n//   App.appearance = App.cable.subscriptions.create(\"AppearanceChannel\")\n//\n// For more details on how you'd configure an actual channel subscription, see ActionCable.Subscription.\n\nvar Subscriptions = /*#__PURE__*/function () {\n  function Subscriptions(consumer) {\n    _classCallCheck(this, Subscriptions);\n\n    this.consumer = consumer;\n    this.subscriptions = [];\n  }\n\n  _createClass(Subscriptions, [{\n    key: \"create\",\n    value: function create(channelName, mixin) {\n      var channel = channelName;\n      var params = _typeof(channel) === \"object\" ? channel : {\n        channel: channel\n      };\n      var subscription = new Subscription(this.consumer, params, mixin);\n      return this.add(subscription);\n    } // Private\n\n  }, {\n    key: \"add\",\n    value: function add(subscription) {\n      this.subscriptions.push(subscription);\n      this.consumer.ensureActiveConnection();\n      this.notify(subscription, \"initialized\");\n      this.sendCommand(subscription, \"subscribe\");\n      return subscription;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(subscription) {\n      this.forget(subscription);\n\n      if (!this.findAll(subscription.identifier).length) {\n        this.sendCommand(subscription, \"unsubscribe\");\n      }\n\n      return subscription;\n    }\n  }, {\n    key: \"reject\",\n    value: function reject(identifier) {\n      var _this = this;\n\n      return this.findAll(identifier).map(function (subscription) {\n        _this.forget(subscription);\n\n        _this.notify(subscription, \"rejected\");\n\n        return subscription;\n      });\n    }\n  }, {\n    key: \"forget\",\n    value: function forget(subscription) {\n      this.subscriptions = this.subscriptions.filter(function (s) {\n        return s !== subscription;\n      });\n      return subscription;\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(identifier) {\n      return this.subscriptions.filter(function (s) {\n        return s.identifier === identifier;\n      });\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      var _this2 = this;\n\n      return this.subscriptions.map(function (subscription) {\n        return _this2.sendCommand(subscription, \"subscribe\");\n      });\n    }\n  }, {\n    key: \"notifyAll\",\n    value: function notifyAll(callbackName) {\n      var _this3 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return this.subscriptions.map(function (subscription) {\n        return _this3.notify.apply(_this3, [subscription, callbackName].concat(args));\n      });\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(subscription, callbackName) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      var subscriptions;\n\n      if (typeof subscription === \"string\") {\n        subscriptions = this.findAll(subscription);\n      } else {\n        subscriptions = [subscription];\n      }\n\n      return subscriptions.map(function (subscription) {\n        return typeof subscription[callbackName] === \"function\" ? subscription[callbackName].apply(subscription, args) : undefined;\n      });\n    }\n  }, {\n    key: \"sendCommand\",\n    value: function sendCommand(subscription, command) {\n      var identifier = subscription.identifier;\n      return this.consumer.send({\n        command: command,\n        identifier: identifier\n      });\n    }\n  }]);\n\n  return Subscriptions;\n}();\n\nexport { Subscriptions as default };","map":null,"metadata":{},"sourceType":"module"}