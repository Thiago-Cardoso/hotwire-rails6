{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar consumer;\nexport function getConsumer() {\n  return _getConsumer.apply(this, arguments);\n}\n\nfunction _getConsumer() {\n  _getConsumer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", consumer || setConsumer(createConsumer().then(setConsumer)));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getConsumer.apply(this, arguments);\n}\n\nexport function setConsumer(newConsumer) {\n  return consumer = newConsumer;\n}\nexport function createConsumer() {\n  return _createConsumer.apply(this, arguments);\n}\n\nfunction _createConsumer() {\n  _createConsumer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _yield$import, createConsumer;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return import(\n            /* webpackChunkName: \"actioncable\" */\n            \"@rails/actioncable/src\");\n\n          case 2:\n            _yield$import = _context2.sent;\n            createConsumer = _yield$import.createConsumer;\n            return _context2.abrupt(\"return\", createConsumer());\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createConsumer.apply(this, arguments);\n}\n\nexport function subscribeTo(_x, _x2) {\n  return _subscribeTo.apply(this, arguments);\n}\n\nfunction _subscribeTo() {\n  _subscribeTo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(channel, mixin) {\n    var _yield$getConsumer, subscriptions;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getConsumer();\n\n          case 2:\n            _yield$getConsumer = _context3.sent;\n            subscriptions = _yield$getConsumer.subscriptions;\n            return _context3.abrupt(\"return\", subscriptions.create(channel, mixin));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _subscribeTo.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}